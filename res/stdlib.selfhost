;;;


# loop a given number of times
# $0 - starting value
# $1 - ending value, exclusive
# $2 - function to run, value is passed as $0

loopIntrinsic = {
    start = $0;
    end = $1;
    f = $2;
    f start;
    newStart = (+ start 1);
    !if (eq newStart end) {} { loop newStart end f }
};
loop = builtin_loop;

# loop until we get a value we want to keep
# $0 - starting value
# $1 - function to map the starting value to a new value
# $2 - a function that takes in the iterating value, returns () if we want to continue

loopTilValue = {
    startingValue = $0;
    iteratorF = $1;
    bodyF = $2;
    result = bodyF startingValue;
    !if (eq result ()) { loopTilValue (iteratorF startingValue) iteratorF bodyF } { result };
};


# use a function as infix
# syntax:
# (inf A B C) => (B A C)
infx = { $1 $0 $2 };

list = { $N };




# splits string based on deliminator.
# Takes in an optional argument, length. Use () for no limit
# returns a list of strings
# the delim needs to be a single character
split_string = {
    input = $0;
    delim = $1;
    length = if (eq () $2) (js "Number.MAX_SAFE_INTEGER") ($2);
    ret = !if (infx length eq 0)
    {
        (list input) # base limit case
    } # else
    {
        index = indexOf input delim;
        !if (infx index eq -1)
        { # if the delim does not exist
            (list input)
        }
        { # else
            part = substring input 0 index;
            rest = substring input (infx index + 1);
            ++ (list part) (split_string rest delim (infx length - 1));
        }
    };
    ret;
};


;;;

